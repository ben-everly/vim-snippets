priority -50

global !p
import vim

# Set g:ultisnips_php_scalar_types to 1 if you'd like to enable PHP 7's scalar types for return values
def isPHPScalarTypesEnabled():
	isEnabled = vim.eval("get(g:, 'ultisnips_php_scalar_types', 0)") == "1"
	return isEnabled or re.match('<\?php\s+declare\(strict_types=[01]\);', '\n'.join(vim.current.window.buffer))
endglobal

global !p
import json

def getNamespace():
	def findComposerFilename():
		prev, test = None, os.path.abspath(path)
		while prev != test:
			if os.path.isfile(os.path.join(test, 'composer.json')):
				return test + '/composer.json'
			prev, test = test, os.path.abspath(os.path.join(test, os.pardir))
		return None

	def getAutoloadConfig():
		filename = findComposerFilename();
		config = {};
		if filename:
			composerJson = json.load(open(findComposerFilename()))
			if 'autoload' in composerJson and 'psr-4' in composerJson['autoload']:
				config.update(composerJson['autoload']['psr-4'])
			if 'autoload-dev' in composerJson and 'psr-4' in composerJson['autoload']:
				config.update(composerJson['autoload-dev']['psr-4'])
		return config

	def findAutoloadNamespace(index, autoloadConfig):
		if index in list(autoloadConfig.values()):
			return list(autoloadConfig.keys())[list(autoloadConfig.values()).index(index)]
		return None

	parts = os.path.relpath(path).split('/')
	parts.pop() #get rid of filename
	unused = []
	autoloadConfig = getAutoloadConfig()
	if not autoloadConfig:
		relpath = os.path.relpath(path)
		m = re.search(r'[A-Z].+(?=/)', relpath)
		return m.group().replace('/', '\\') if m else '';
	while parts:
		if findAutoloadNamespace('/'.join(parts), autoloadConfig):
			return findAutoloadNamespace('/'.join(parts), autoloadConfig) + '\\'.join(unused)
		if findAutoloadNamespace('/'.join(parts) + '/', autoloadConfig):
			return findAutoloadNamespace('/'.join(parts) + '/', autoloadConfig) + '\\'.join(unused)
		unused.insert(0, parts.pop())

	return '\\'.join(unused)

endglobal

snippet gm "PHP Class Getter" bm
/**
 * @return ${2:string}
 */
public function get${1/\w+\s*/\u$0/}()`!p snip.rv = ': '+t[2] if isPHPScalarTypesEnabled() else ''`
{
    return $this->$1;
}$0
endsnippet

snippet sm "PHP Class Setter" bm
/**
 * @param ${2:string} $$1
 * @return `!p snip.rv=snip.basename`
 */
public function set${1/\w+\s*/\u$0/}(${2/(mixed)|(.*)/(?1::$2 )/}$$1)`!p snip.rv = ': '+snip.basename if isPHPScalarTypesEnabled() else ''`
{
    $this->$1 = $$1;
    return $this;
}$0
endsnippet

snippet gs "PHP Class Getter Setter" bm
/**
* @return ${2:string}
*/
public function get${1/\w+\s*/\u$0/}()`!p snip.rv = ': '+t[2] if isPHPScalarTypesEnabled() else ''`
{
	return $this->$1;
}

/**
 * @param $2 $$1
 * @return `!p snip.rv=snip.basename`
 */
public function set${1/\w+\s*/\u$0/}(${2/(mixed)|(.*)/(?1::$2 )/}$$1)`!p snip.rv = ': '+snip.basename if isPHPScalarTypesEnabled() else ''`
{
	$this->$1 = $$1;
	return $this;
}$0
endsnippet

snippet pub "Public function" bm
/**
 * @param ${2/, /\n     * \@param /g}
 * @return ${3:void}
 */
public function ${1}(${2:$params})`!p snip.rv = ': '+t[3] if isPHPScalarTypesEnabled() else ''`
{
	${VISUAL}$0
}
endsnippet

snippet pro "Protected function" bm
/**
 * @param ${2/, /\n     * \@param /g}
 * @return ${3:void}
 */
protected function ${1}(${2:$params})`!p snip.rv = ': '+t[3] if isPHPScalarTypesEnabled() else ''`
{
	${VISUAL}$0
}
endsnippet

snippet pri "Private function" bm
/**
 * @param ${2/, /\n     * \@param /g}
 * @return ${3:void}
 */
private function ${1}(${2:$params})`!p snip.rv = ': '+t[3] if isPHPScalarTypesEnabled() else ''`
{
	${VISUAL}$0
}
endsnippet

snippet pubs "Public static function" bm
/**
 * @param ${2/, /\n     * \@param /g}
 * @return ${3:void}
 */
public static function ${1}(${2:$params})`!p snip.rv = ': '+t[3] if isPHPScalarTypesEnabled() else ''`
{
	${VISUAL}$0
}
endsnippet

snippet pros "Protected static function" bm
/**
 * @param ${2/, /\n     * \@param /g}
 * @return ${3:void}
 */
protected static function ${1}(${2:$params})`!p snip.rv = ': '+t[3] if isPHPScalarTypesEnabled() else ''`
{
	${VISUAL}$0
}
endsnippet

snippet pris "Private static function" bm
/**
 * @param ${2/, /\n     * \@param /g}
 * @return ${3:void}
 */
private static function ${1}(${2:$params})`!p snip.rv = ': '+t[3] if isPHPScalarTypesEnabled() else ''`
{
	${VISUAL}$0
}
endsnippet

snippet con "Constructor function" bm
/**
 * @param ${1/, /\n     * \@param /g}
 */
public function __construct(${1:$dependencies})
{${1/\w* ?\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}$0
endsnippet

snippet fu "Function" bm
/**
 * @param ${2/, /\n     * \@param /g}
 * @return ${3:void}
 */
function ${1}(${2:$params})`!p snip.rv = ': '+t[3] if isPHPScalarTypesEnabled() else ''`
{
	${VISUAL}$0
}
endsnippet

snippet new "New class instance" bm
$${1:variableName} = new ${2:${1/\w+\s*/\u$0/}}($3);$0
endsnippet

snippet ns "namespace declaration" bm
namespace `!p snip.rv = getNamespace()`;$0
endsnippet

snippet class "Class declaration template" bm
<?php

namespace `!p snip.rv = getNamespace()`;

class `!p snip.rv=snip.basename`
{
	$0
}
endsnippet

snippet interface "Interface declaration template" bm
<?php

namespace `!p snip.rv = getNamespace()`;

interface `!p snip.rv=snip.basename`
{
	$0
}
endsnippet

snippet trait "Trait declaration template" bm
<?php

namespace `!p snip.rv = getNamespace()`;

trait `!p snip.rv=snip.basename`
{
	$0
}
endsnippet

# PHPUnit snippets
snippet testcase "TestCase class declaration" bm
<?php

namespace ${1:`!p snip.rv = getNamespace()`};

use PHPUnit\Framework\TestCase;

class `!p snip.rv = re.match(r'.*(?=\.)', fn).group()` extends TestCase
{
	public function test${2}()
	{
		${0:${VISUAL}}
	}
}
endsnippet

# :vim:ft=snippets:
